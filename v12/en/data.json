{
    "version": "0.1",
    "pageContent": 
	{
        "_comments": "object that contains data for page labels, buttons, etc.",
        "navItems": 
		{
            "_common": 
			{
                "buttonBackToGallery": 
				{
                    "name": "Back To Gallery",
					"method": "backToGallery()",
					"idName": "backToGallery"	
                },
                "buttonStartTutorial": 
				{
                    "name": "Start Tutorial",
					"method": "startTutorialFromDetailsScreen()",
					"idName": "startTutorial"
                },
				"buttonViewDetails": 
				{
                    "name": "View Details",
					"method": "viewDetails()",
					"idName": "stepsViewDetails"	
                }
            }
        }
    },
    "tutorial": 
	{
        "_common": 
		{
            "name": "Unit Testing - Running Test Cases in Test Projects and Integration Server JUnit configuration",
            "shortDescription": "Learn how to structure Test Cases inside Test projects, and how to configure test execution options for Integration Server JUnits.",
            "durationText": "This tutorial takes approximately",
            "durationTime": "15 minutes",
            "_resourceToOpenComment": "The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
            "resourceToOpen": "MyFlowUnderTest",
            "helpLink": 
			{
                "text": "IBM Knowledge Center",
           		"link": "https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
            }
        },
        "pageDetails": 
		{
            "topicsName": "Tutorial topics",
            "_topicListComment": "A short list of product concepts or tasks demonstrated by this tutorial",
            "topicList": 
			[
                {
                    "title": "Java Unit Testing"
                }			
            ],
            "outcomesName": "Learning outcomes",
            "_outcomesComment": "A description of what the user will have learned or accomplished by running this tutorial.",
            "outcomeList": 
			[
                {
                    "title": "Explore some pre-defined unit tests for a message flow"
                },
				{
                    "title": "Run the provided tests in the App Connect Enterprise Toolkit using the default execution options for Integration Server JUnits"
                },
				{
                    "title": "Explore more complex configuration options for controlling how Integration Server JUnits are run by the App Connect Enterprise Toolkit."
                }
            ],
            "summary": 
			{
                "overviewName": "Overview",
                "_overviewComment": "A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
                "sections": 
				[
					 {
                        "section": "This tutorial provides a relatively simple message flow in an application that is designed to receive a JSON input message over HTTP. Five input messages are provided which exercise different branches of logic in the message flow. A Test Project is also provided, which contains nine test cases. Each test case tests a single message flow node using a NodeSpy. Where required, Message Assembly files (.mxml) are provided which describe the expected output from each test case."
					 },
					 {
                        "section": "The tutorial describes how to run the provided test cases agains the message flow using the default options for running an Integration Server JUnit. The tutorial then describes how you can run a single isolated test case, and use other more complex configuration options such as turning tracing on and how to run tests in an integration server which uses an existing work directory."					
					 }
                ]
            },
			"helpLinks": 
			{
				"_helpLinksComment": "Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
				"title": "Find out more",
				"details": 
				[
					{
						"title": "Knowledge Center link to ",
						"description": "Developing unit tests using Test Projects",
						"link": "https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
						"type": "web"
					},
					{					
						"title": "Knowledge Center link to ",
						"description": "Using the Message Assembly Editor",
						"link": "https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
						"type": "web"
					}
				]
			}
        },
        "pageSteps": 
		{
            "create": 
			{
                "overview": 
				{
                    "name": "Create",
                    "heading": "Import a project",
                    "_createComment": "A description of what will happen when the user clicks Import.",
                    "sections": 
					[
                        {
                            "section": "Click <span class='uicontrol'>Import</span> and two projects will be added to your workspace. The application named <span class='application'>MyApplicationUnderTest</span> provides a single message flow named <span class='resource'>MyMessageFlowUnderTest</span> which receives data over HTTP. The test project named <span class='application'>MyTestProject</span> contains eighteen example message assembly files, and nine unit tests."
						},						
						{				
						 	"section": "The message flow named <span class='resource'>MyMessageFlowUnderTest</span> expects to receive input JSON messages which conform to the JSON schema named <b>InputMessageSchema.json</b> which you will find in the same application."							
						},						
						{
							"section": "Now move to the Prepare section where we will explore the provided message flow, test data and the Test Project's test cases in detail."
						 }
					 ]
				 },
                "helpLinks": 
				{
                    "title": "Find out more",
                    "details": 
					[
                        {
                            "title": "Knowledge Center link to ",
                            "description": "Developing integration solutions by using applications",
                            "link": "https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
							"type": "web"
                        }
                    ]
                },
                "actions": 
				{
                    "title": "Create Actions",
                    "details": 
					[
                        {
                            "name": "Import",
                            "method": "importArtifacts()"
                        }
                    ]
                }
            },
            "prepare": 
			{
                "overview": 
				{
                    "name": "Prepare",
                    "heading": "",
                    "_prepareComment": "A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
                    "sections": 
		     [				 
				{
"section": "The message flow expects to receive JSON data over HTTP. Each message carries three string properties named FirstName, LastName and Country for a fictitious person. The Country field uses a two character abbreviation for a country. Four example valid input messages are saved in the application for use with the Flow Exerciser:<br><code>{\"FirstName\": \"Jean\", \"LastName\": \"Dupont\", \"Country\":\"FR\"}<br>{\"FirstName\": \"Joe\", \"LastName\": \"Bloggs\", \"Country\":\"GB\"}<br>{\"FirstName\": \"John\", \"LastName\": \"Doe\", \"Country\":\"US\"}<br>{\"FirstName\": \"Otto\", \"LastName\": \"Normalverbraucher\", \"Country\":\"DE\"}</code><br>One example invalid input message is saved in the application for use with the Flow Exerciser:<br><code>This message is deliberately not valid JSON</code><br>These input messages have been used to capture Message Assembly files which describe what the logical tree looks like for each step of the message flow. If you would like, you can use these inputs with the Flow Exerciser to become familiar with the behavior of the message flow. This is not a mandatory step for the tutorial - as we have already taken this message data and used it to create test cases which will be executed later in the tutorial - but it may help with your understanding of the scenario."
					},					
					{
						"section":"Nine Test Cases have been defined inside the Test Project <span class='resource'>MyTestProject</span> in the java file named <b>MyApplicationUnderTest_MyFlowUnderTest_UnitTests.java</b>. You can open this file to familiarise yourself with the detail of the test cases. In summary their purpose is as follows:<br><b>TestCase01:</b> Test the MappingError node to ensure it transforms data correctly<br><b>TestCase02:</b> Test the Route node to ensure a message with Country=FR is routed to the default output terminal<br><b>TestCase03:</b> Test the MappingDefault node to ensure it transforms data correctly<br><b>TestCase04:</b> Test the Route node to ensure a message with Country=GB is routed to the GB output terminal<br><b>TestCase05:</b> Test the MappingGB node to ensure it transforms data correctly<br><b>TestCase06:</b> Test the Route node to ensure a message with Country=US is routed to the US output terminal<br><b>TestCase07:</b> Test the MappingUS node to ensure it transforms data correctly<br><b>TestCase08:</b> Test the Route node to ensure a message with Country=DE is routed to the DE output terminal<br><b>TestCase09:</b> Test the MappingDE node to ensure it transforms data correctly"
			   },
				{
							"section": "Now move to the Run section where we will execute the tests and explore more detailed configuration which controls how the Toolkit runs the tests in a Test Project."
				 }
				
             ]
                },
                "helpLinks": 
				{
                }
            },
            "run": 
			{
                "overview": 
				{
                    "name": "Run",
                    "heading": "",
                    "_runComment": "The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
                "sections":[                            
                {
                "section":"<b>Execute all of the provided test cases, using the default Integration Server JUnit configuration</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details": "Right-click the test project <span class='application'>MyTestProject</span> and choose the option to <span class='application'>Run Test Project</span>. After a few seconds, an integration server will be started which runs the test. The Console view at the base of the Toolkit window will show the progress of the server starting, and the tests being run. The output will look a bit like this:<br><code>mqsicreateworkdir: Copying sample server.config.yaml to work directory<br>        1 file(s) copied.<br>Successful command completion.<br>BIP8071I: Successful command completion.<br>2021-05-14 00:39:02.209710: BIP1990I: Integration server 'eclipse-work' starting initialization; version '12.0.0.0' (64-bit)<br>2021-05-14 00:39:02.248816: BIP9905I: Initializing resource managers.<br>2021-05-14 00:39:17.407470: BIP9906I: Reading deployed resources.<br>2021-05-14 00:39:17.439984: BIP9907I: Initializing deployed resources.<br> 2021-05-14 00:39:17.445992: BIP2155I: About to 'Initialize' the deployed resource 'MyApplicationUnderTest' of type 'Application'.<br>2021-05-14 00:39:26.946058: BIP2155I: About to 'Start' the deployed resource 'MyApplicationUnderTest' of type 'Application'.<br>2021-05-14 00:39:27.005      1 this class com.ibm.broker.plugin.MbNonDelegatingJavaResourceClassLoader@bbb55a41<br>2021-05-14 00:39:27.017      1 Attempting Eclipse junit run with args |-version 3 -port 65079 -testLoaderClass org.eclipse.jdt.internal.junit5.runner.JUnit5TestLoader -loaderpluginname org.eclipse.jdt.junit5.runtime -packageNameFile C:\\Users\\BENJAM~1\\AppData\\Local\\Temp\\packageNames2998722845942089842.txt   |<br>2021-05-14 00:39:28.929      1 runnerClass class org.eclipse.jdt.internal.junit.runner.RemoteTestRunner<br>2021-05-14 00:39:28.932      1 runnerMainMethod public static void org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(java.lang.String[])<br></code><br>When the tests finish the JUnit view will be displayed in the top left of the Toolkit and should report that all nine test cases have passed."
					}
				  ]
				}
			   },				
				{				                
                "section":"<b>Advanced Options: Run Configuration for Integration Server JUnit - Integration Server Settings</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                    "details": "Right-click the Test project and choose <b>Run As > Run Configurations</b>. In the main section of the Run Configuration window, you will find separately named tabs displaying distinct aspects of configuration such as:<br><b>Integration Server Settings</b><br><b>Test</b><br><b>Common</b><br><b>Environment</b><br><b>Refresh</b><br>We will be exploring the properties on the <b>Integration Server Settings</b> tab and the <b>Test</b> tab. The main choice to make when executing Integration Server JUnits in the Tookit is whether you would like to use a temporary working directory to support the integration server, or an existing working directory which you have previously configured. It is expected that the majority of unit testing will be for individual message flow nodes, and will not require any further specialised settings for the configuration of the integration server, so it is expected that most users will typically use the default selection of <b>Use temporary working directory</b>. There may be circumstances where you wish to execute tests which rely on a server using particular port numbers, or to have access to other configuration resources such as particular policy documents or credentials for third party systems. This configuration can be set up in advance of running the test, and by pointing the server to an existing working directory, these additional configurations will be available to the server which is being used to execute the tests when it starts. Choosing this configuration approach brings its own additional complexities. For example you should make sure that there are no other active integration servers on your machine using the nominated working directory. You may also need to be concerned with potential port conflicts. If you select <b>Use an existing working directory</b> then you will also have the opportunity to select the option named <b>Clear the deployed resources in the existing working directory before the Test Run</b>. This is not selected by default, because typically if you have chosen to use an existing working directory, you are most likely to want to preserve what's already deployed (these files are stored in the run subdirectory of the working directory). You can experiment with the settings we have discussed, but for the instructions below in this tutorial we will assume the default choice to <b>Use temporary working directory</b>."										
					},
					{
					"details": "Staying on the Integration Server Settings tab, at the bottom of the window you will find some further settings:<br><b>Start Flow threads</b> This checkbox is not selected by default. For most unit test at a granularity of a specific message flow node, you will not need to start message flow threads, but when doing whole flow testing there may be circumstances where you will need this option. Do not select it for the purpose of this tutorial.<br><b>Disable the REST API administration Port</b> This checkbox is selected by default. Typically you will not need to communicate with an integration server whilst it executes your unit tests so normally you will be advised to leave this checkbox selected. For the sake of this tutorial demonstration, untick the box.<br><b>Real/Fake MQ Manager Name for unit testing: FakeQueueManagerName</b> Some unit tests may involve message flows which contain message flow nodes such as the MQInput or MQOutput node whose purpose is to interact with MQ. It is likely that these kind of unit test won't actually need messages to be written to an actual queue, but to avoid configuration errors being encountered by the server when it starts it may be helpful to leave this property with its default value of FakeQueueManagerName. You can of course specify a Queue Manager name of your own choice if you prefer.<br><b>Trace options</b> provides a dropdown with three possible integration server tracing options - none, service and diagnostic. These options will only be needed when requested by an IBM Support representative. Tracing should only be used in rare circumstances when requested by IBM as it will significantly slow down the server. If tracing is being collected, it can be located after the tests have been run from the following directory locations:<br>On Windows: <code>%temp%\\eclipse-work\\config\\common\\log</code><br>On Unix: <code>/tmp/eclipse-work/config/common/log</code><br><b>Debug Port</b> to lets you specify a debug port number of your own choice and is only used in rare situations where you are attempting to attach the debugger whilst running test cases."						
					},	
						{
					"details": "Click the Run button and the tests will execute. You can examine the console entries and if you followed the suggestions above then you should see that the REST Admin port has now been enabled, as highlighted in bold below:<br><br><code><b>2021-05-15 16:06:55.952996: BIP3132I: The HTTP Listener has started listening on port '7600' for 'RestAdmin http' connections.</b><br>2021-05-15 16:06:55.955660: BIP9910I: Running tests in test project 'ExampleTestDrivenDevelopment_IntegrationTest'.<br>2021-05-15 16:06:56.049      1 this class com.ibm.broker.plugin.MbNonDelegatingJavaResourceClassLoader@e39ca18a<br>2021-05-15 16:06:56.055      1 Attempting Eclipse junit run with args |-version 3 -port 64610 -testLoaderClass org.eclipse.jdt.internal.junit5.runner.JUnit5TestLoader -loaderpluginname org.eclipse.jdt.junit5.runtime -packageNameFile C:\\Users\\BENJAM~1\\AppData\\Local\\Temp\\packageNames8489438107246072506.txt   |<br>2021-05-15 16:06:57.393      1 runnerClass class org.eclipse.jdt.internal.junit.runner.RemoteTestRunner<br>2021-05-15 16:06:57.393      1 runnerMainMethod public static void org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(java.lang.String[])<br>2021-05-15 16:06:58.243880: BIP9911I: Running tests in test project 'ExampleTestDrivenDevelopment_IntegrationTest' completed successfully.<br></code>"
					}
				  ]				
			   }
				},				
				{				                
                "section":"<b>Advanced Options: Run Configuration for Integration Server JUnit - Test</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details": "Right-click the test project <span class='application'>MyTestProject</span> and choose <b>Run As > Run Configurations</b>. This time, in the main panel, switch to the tab named <b>Test</b>. This panel lets you choose to:<br><b>Run a single test</b> or <br><b>Run all tests in the selected project, package or source folder</b><br>This time, choose the option to <b>Run a single test</b> and choose one of the tests to run, for example TestCase04:<br><b>Project = MyTestProject</b><br><b>Test class = tes.MyApplicationUnderTest_MyFlowUnderTest_UnitTests</b><br><b>Test method = MyApplicationUnderTest_MyFlowUnderTest_TestCase04</b><br>Click the Run button."
					},
					{
					"details": "As in the previous examples, the console will show the server starting but when the tests have executed the JUnit view in the top left corner of the Toolkit will show that only TestCase04 was executed. This technique is useful if you only wish to execute a single test."
					}
				  ]				
			   }
			},
					{
			    			"section": "This tutorial has shown how to structure Test Cases inside Test projects, and how to configure test execution options for Integration Server JUnits."
						}
                    ]
                },
                "helpLinks": 
				{
                    "title": "Find out more",
                    "details": 
					[                        
                        {
                            "title": "Knowledge Center link to ",
                            "description": "Unit Testing your message flow",
                            "link": "https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
							"type": "web"
                        }
                    ]
                }
            }
        }
    }
}
