{
    "version": "0.1",
    "pageContent": 
	{
        "_comments": "object that contains data for page labels, buttons, etc.",
        "navItems": 
		{
            "_common": 
			{
                "buttonBackToGallery": 
				{
                    "name": "Back To Gallery",
					"method": "backToGallery()",
					"idName": "backToGallery"	
                },
                "buttonStartTutorial": 
				{
                    "name": "Start Tutorial",
					"method": "startTutorialFromDetailsScreen()",
					"idName": "startTutorial"
                },
				"buttonViewDetails": 
				{
                    "name": "View Details",
					"method": "viewDetails()",
					"idName": "stepsViewDetails"	
                }
            }
        }
    },
    "tutorial": 
	{
        "_common": 
		{
            "name": "Unit Testing - Running Test Cases in Test Projects and Integration Server JUnit configuration",
            "shortDescription": "Learn how to structure Test Cases inside Test projects, and how to configure test execution options for Integration Server JUnits.",
            "durationText": "This tutorial takes approximately",
            "durationTime": "15 minutes",
            "_resourceToOpenComment": "The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
            "resourceToOpen": "MyFlowUnderTest",
            "helpLink": 
			{
                "text": "IBM Knowledge Center",
           		"link": "https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
            }
        },
        "pageDetails": 
		{
            "topicsName": "Tutorial topics",
            "_topicListComment": "A short list of product concepts or tasks demonstrated by this tutorial",
            "topicList": 
			[
                {
                    "title": "Java Unit Testing"
                }			
            ],
            "outcomesName": "Learning outcomes",
            "_outcomesComment": "A description of what the user will have learned or accomplished by running this tutorial.",
            "outcomeList": 
			[
                {
                    "title": "Explore some pre-defined unit tests for a message flow"
                },
				{
                    "title": "Run the provided tests in the App Connect Enterprise Toolkit using the default execution options for Integration Server JUnits"
                },
				{
                    "title": "Explore more complex configuration options for controlling how Integration Server JUnits are run by the App Connect Enterprise Toolkit."
                }
            ],
            "summary": 
			{
                "overviewName": "Overview",
                "_overviewComment": "A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
                "sections": 
				[
					 {
                        "section": "This tutorial provides a relatively simple message flow in an application that is designed to receive a JSON input message over HTTP. Five input messages are provided which exercise different branches of logic in the message flow. A Test Project is also provided, which contains nine test cases. Each test case tests a single message flow node using a NodeSpy. Where required, Message Assembly files (.mxml) are provided which describe the expected output from each test case."
					 },
					 {
                        "section": "The tutorial describes how to run the provided test cases agains the message flow using the default options for running an Integration Server JUnit. The tutorial then describes how you can run a single isolated test case, and use other more complex configuration options such as turning tracing on and how to run tests in an integration server which uses an existing work directory."					
					 }
                ]
            },
			"helpLinks": 
			{
				"_helpLinksComment": "Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
				"title": "Find out more",
				"details": 
				[
					{
						"title": "Knowledge Center link to ",
						"description": "Developing unit tests using Test Projects",
						"link": "https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
						"type": "web"
					},
					{					
						"title": "Knowledge Center link to ",
						"description": "Using the Message Assembly Editor",
						"link": "https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
						"type": "web"
					}
				]
			}
        },
        "pageSteps": 
		{
            "create": 
			{
                "overview": 
				{
                    "name": "Create",
                    "heading": "Import a project",
                    "_createComment": "A description of what will happen when the user clicks Import.",
                    "sections": 
					[
                        {
                            "section": "Click <span class='uicontrol'>Import</span> and two projects will be added to your workspace. The application named <span class='application'>MyApplicationUnderTest</span> provides a single message flow named <span class='resource'>MyMessageFlowUnderTest</span> which receives data over HTTP. The test project named <span class='application'>MyTestProject</span> contains eighteen example message assembly files, and nine unit tests."
						},						
						{				
						 	"section": "The message flow named <span class='resource'>MyMessageFlowUnderTest</span> expects to receive input JSON messages which conform to the JSON schema named <b>InputMessageSchema.json</b> which you will find in the same application."							
						},						
						{
							"section": "Now move to the Prepare section where we will explore the provided message flow, test data and the Test Project's test cases in detail."
						 }
					 ]
				 },
                "helpLinks": 
				{
                    "title": "Find out more",
                    "details": 
					[
                        {
                            "title": "Knowledge Center link to ",
                            "description": "Developing integration solutions by using applications",
                            "link": "https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
							"type": "web"
                        }
                    ]
                },
                "actions": 
				{
                    "title": "Create Actions",
                    "details": 
					[
                        {
                            "name": "Import",
                            "method": "importArtifacts()"
                        }
                    ]
                }
            },
            "prepare": 
			{
                "overview": 
				{
                    "name": "Prepare",
                    "heading": "",
                    "_prepareComment": "A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
                    "sections": 
		     [				 
				{
"section": "The message flow expects to receive JSON data over HTTP. Each message carries three string properties named FirstName, LastName and Country for a fictitious person. The Country field uses a two character abbreviation for a country. Four example valid input messages are saved in the application for use with the Flow Exerciser:<br><code>{\"FirstName\": \"Jean\", \"LastName\": \"Dupont\", \"Country\":\"FR\"}<br>{\"FirstName\": \"Joe\", \"LastName\": \"Bloggs\", \"Country\":\"GB\"}<br>{\"FirstName\": \"John\", \"LastName\": \"Doe\", \"Country\":\"US\"}<br>{\"FirstName\": \"Otto\", \"LastName\": \"Normalverbraucher\", \"Country\":\"DE\"}</code><br>One example invalid input message is saved in the application for use with the Flow Exerciser:<br><code>This message is deliberately not valid JSON</code><br>These input messages have been used to capture Message Assembly files which describe what the logical tree looks like for each step of the message flow. If you would like, you can use these inputs with the Flow Exerciser to become familiar with the behavior of the message flow. This is not a mandatory step for the tutorial - as we have already taken this message data and used it to create test cases which will be executed later in the tutorial - but it may help with your understanding of the scenario."
					},					
					{
						"section":"Nine Test Cases have been defined inside the Test Project <span class='resource'>MyTestProject</span> in the java file named <b>MyApplicationUnderTest_MyFlowUnderTest_UnitTests.java</b>. You can open this file to familiarise yourself with the detail of the test cases. In summary their purpose is as follows:<br><b>TestCase01:</b> Test the MappingError node to ensure it transforms data correctly<br><b>TestCase02:</b> Test the Route node to ensure a message with Country=FR is routed to the default output terminal<br><b>TestCase03:</b> Test the MappingDefault node to ensure it transforms data correctly<br><b>TestCase04:</b> Test the Route node to ensure a message with Country=GB is routed to the GB output terminal<br><b>TestCase05:</b> Test the MappingGB node to ensure it transforms data correctly<br><b>TestCase06:</b> Test the Route node to ensure a message with Country=US is routed to the US output terminal<br><b>TestCase07:</b> Test the MappingUS node to ensure it transforms data correctly<br><b>TestCase08:</b> Test the Route node to ensure a message with Country=DE is routed to the DE output terminal<br><b>TestCase09:</b> Test the MappingDE node to ensure it transforms data correctly"
			   },
				{
							"section": "Now move to the Run section where we will execute the tests and explore more detailed configuration which controls how the Toolkit runs the tests in a Test Project."
				 }
				
             ]
                },
                "helpLinks": 
				{
                }
            },
            "run": 
			{
                "overview": 
				{
                    "name": "Run",
                    "heading": "",
                    "_runComment": "The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
                "sections":[                            
                {
                "section":"<b>Execute all of the provided test cases, using the default Integration Server JUnit configuration</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details": "Right-click the test project <span class='application'>MyTestProject</span> and choose the option to <span class='application'>Run Test Project</span>. After a few seconds, an integration server will be started which runs the test. The Console view at the base of the Toolkit window will show the progress of the server starting, and the tests being run. The output will look a bit like this:<br><code>mqsicreateworkdir: Copying sample server.config.yaml to work directory<br>        1 file(s) copied.<br>Successful command completion.<br>BIP8071I: Successful command completion.<br>2021-05-14 00:39:02.209710: BIP1990I: Integration server 'eclipse-work' starting initialization; version '12.0.0.0' (64-bit)<br>2021-05-14 00:39:02.248816: BIP9905I: Initializing resource managers.<br>2021-05-14 00:39:17.407470: BIP9906I: Reading deployed resources.<br>2021-05-14 00:39:17.439984: BIP9907I: Initializing deployed resources.<br> 2021-05-14 00:39:17.445992: BIP2155I: About to 'Initialize' the deployed resource 'MyApplicationUnderTest' of type 'Application'.<br>2021-05-14 00:39:26.946058: BIP2155I: About to 'Start' the deployed resource 'MyApplicationUnderTest' of type 'Application'.<br>2021-05-14 00:39:27.005      1 this class com.ibm.broker.plugin.MbNonDelegatingJavaResourceClassLoader@bbb55a41<br>2021-05-14 00:39:27.017      1 Attempting Eclipse junit run with args |-version 3 -port 65079 -testLoaderClass org.eclipse.jdt.internal.junit5.runner.JUnit5TestLoader -loaderpluginname org.eclipse.jdt.junit5.runtime -packageNameFile C:\\Users\\BENJAM~1\\AppData\\Local\\Temp\\packageNames2998722845942089842.txt   |<br>2021-05-14 00:39:28.929      1 runnerClass class org.eclipse.jdt.internal.junit.runner.RemoteTestRunner<br>2021-05-14 00:39:28.932      1 runnerMainMethod public static void org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(java.lang.String[])<br></code><br>When the tests finish the JUnit view will be displayed in the top left of the Toolkit and should report that all nine test cases have passed."
					}
				  ]
				}
			   },
				{				                
                "section":"<b>Explore the advanced options of Integration Server JUnit configuration</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details": "Right-click the test project <span class='application'>MyTestProject</span> and choose ..."
					}
				  ]				
			   }
			},
					{
			    			"section": "This tutorial has shown how to structure Test Cases inside Test projects, and how to configure test execution options for Integration Server JUnits."
						}
                    ]
                },
                "helpLinks": 
				{
                    "title": "Find out more",
                    "details": 
					[                        
                        {
                            "title": "Knowledge Center link to ",
                            "description": "Unit Testing your message flow",
                            "link": "https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
							"type": "web"
                        }
                    ]
                }
            }
        }
    }
}
